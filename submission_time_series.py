# -*- coding: utf-8 -*-
"""Submission Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i272bnEeAAWTy6h1kbro_4ZxHd_0zpqY
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data = pd.read_csv('/content/GlobalLandTemperaturesByCountry.csv')
data

data = data.loc[data['Country'].isin(['Indonesia'])]
data

data.isnull().sum()

data.dropna(subset=['AverageTemperature'],inplace=True)
data.dropna(subset=['AverageTemperatureUncertainty'],inplace=True)

data.isnull().sum()

dates = data['dt'].values
temp  = data['AverageTemperature'].values

plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature average Indonesia',
          fontsize=20);

from sklearn.model_selection import train_test_split

x_train, x_val, y_train, y_val = train_test_split(temp, dates, train_size=0.8, test_size = 0.2, shuffle = False )

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(x_val, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

# menghitung minimum MAE
threshold = (temp.max() - temp.min()) * 10/100
threshold

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set,epochs=100,validation_data = val_set,callbacks=[callbacks])

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Accuracy')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()